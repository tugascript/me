//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub email: String,
    pub version: i32,
    pub is_active: bool,
    pub is_staff: bool,
    pub is_admin: bool,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auth_provider::Entity")]
    AuthProvider,
    #[sea_orm(has_many = "super::blog_post::Entity")]
    BlogPost,
    #[sea_orm(has_many = "super::blog_post_comment::Entity")]
    BlogPostComment,
    #[sea_orm(has_many = "super::blog_post_comment_reaction::Entity")]
    BlogPostCommentReaction,
    #[sea_orm(has_many = "super::blog_post_image::Entity")]
    BlogPostImage,
    #[sea_orm(has_many = "super::blog_post_reaction::Entity")]
    BlogPostReaction,
    #[sea_orm(has_many = "super::blog_post_tag::Entity")]
    BlogPostTag,
    #[sea_orm(has_many = "super::blog_series::Entity")]
    BlogSeries,
    #[sea_orm(has_many = "super::certificate::Entity")]
    Certificate,
    #[sea_orm(has_many = "super::education::Entity")]
    Education,
    #[sea_orm(has_many = "super::experience::Entity")]
    Experience,
    #[sea_orm(has_many = "super::open_source_contribution::Entity")]
    OpenSourceContribution,
    #[sea_orm(has_many = "super::project::Entity")]
    Project,
    #[sea_orm(has_many = "super::project_image::Entity")]
    ProjectImage,
    #[sea_orm(has_many = "super::project_link::Entity")]
    ProjectLink,
    #[sea_orm(has_many = "super::skill::Entity")]
    Skill,
    #[sea_orm(has_many = "super::summary::Entity")]
    Summary,
    #[sea_orm(has_many = "super::technology::Entity")]
    Technology,
    #[sea_orm(has_one = "super::user_suspension::Entity")]
    UserSuspension,
}

impl Related<super::auth_provider::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthProvider.def()
    }
}

impl Related<super::blog_post_comment_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostCommentReaction.def()
    }
}

impl Related<super::blog_post_image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostImage.def()
    }
}

impl Related<super::blog_post_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostReaction.def()
    }
}

impl Related<super::blog_post_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostTag.def()
    }
}

impl Related<super::blog_series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogSeries.def()
    }
}

impl Related<super::certificate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Certificate.def()
    }
}

impl Related<super::education::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Education.def()
    }
}

impl Related<super::experience::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Experience.def()
    }
}

impl Related<super::open_source_contribution::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OpenSourceContribution.def()
    }
}

impl Related<super::project::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Project.def()
    }
}

impl Related<super::project_image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectImage.def()
    }
}

impl Related<super::project_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectLink.def()
    }
}

impl Related<super::skill::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Skill.def()
    }
}

impl Related<super::summary::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Summary.def()
    }
}

impl Related<super::technology::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Technology.def()
    }
}

impl Related<super::user_suspension::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSuspension.def()
    }
}

impl Related<super::blog_post::Entity> for Entity {
    fn to() -> RelationDef {
        super::blog_post_reaction::Relation::BlogPost.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::blog_post_reaction::Relation::User.def().rev())
    }
}

impl Related<super::blog_post_comment::Entity> for Entity {
    fn to() -> RelationDef {
        super::blog_post_comment_reaction::Relation::BlogPostComment.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::blog_post_comment_reaction::Relation::User
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}

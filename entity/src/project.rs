//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use super::sea_orm_active_enums::ProjectStatusEnum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "project")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub subtitle: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub status: ProjectStatusEnum,
    pub start_date: Date,
    pub end_date: Option<Date>,
    pub drop_date: Option<Date>,
    pub created_by_id: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::project_image::Entity")]
    ProjectImage,
    #[sea_orm(has_many = "super::project_link::Entity")]
    ProjectLink,
    #[sea_orm(has_many = "super::project_technology::Entity")]
    ProjectTechnology,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedById",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::project_image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectImage.def()
    }
}

impl Related<super::project_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectLink.def()
    }
}

impl Related<super::project_technology::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectTechnology.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::technology::Entity> for Entity {
    fn to() -> RelationDef {
        super::project_technology::Relation::Technology.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::project_technology::Relation::Project.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "blog_post_comment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub blog_post_id: i32,
    #[sea_orm(column_type = "Text")]
    pub comment: String,
    pub is_hidden: bool,
    pub created_by_id: i32,
    pub parent_comment_id: Option<i32>,
    pub image_url: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::blog_post::Entity",
        from = "Column::BlogPostId",
        to = "super::blog_post::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    BlogPost,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentCommentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::blog_post_comment_reaction::Entity")]
    BlogPostCommentReaction,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::CreatedById",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::blog_post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPost.def()
    }
}

impl Related<super::blog_post_comment_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogPostCommentReaction.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::blog_post_comment_reaction::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::blog_post_comment_reaction::Relation::BlogPostComment
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
